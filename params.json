{"name":"ConcurrentList","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A thread-safe, lock-free implementation of the IList<T> interface for .NET","body":"`ConcurrentList<T>` is an implementation of the `IList<T>` interface designed for lock-free concurrency, with the following notable omissions\\*:\r\n\r\n1. `Remove`\r\n2. `RemoveAt`\r\n3. `Insert`\r\n\r\nIn other words, `ConcurrentList<T>` is an *append-only* collection type supporting random indexed access to its elements.\r\n\r\nThe design of this data structure is described in the following post from the blog The Philosopher Developer:\r\n\r\nhttp://philosopherdeveloper.wordpress.com/2011/02/23/how-to-build-a-thread-safe-lock-free-resizable-array/\r\n\r\nFor comparison purposes, this library also includes a `SynchronizedList<T>` type, which is a thin wrapper around the BCL's `List<T>` class with the appropriate operations synchronized via `lock` statements.\r\n\r\n\\* The members of `IList<T>` not implemented by `ConcurrentList<T>` are explicit (not public) and throw exceptions when called."}